{"version":3,"sources":["ReactQuill.js","DraftJs.jsx","TinyMCE.js","TablePage.js","App.js","serviceWorker.js","index.js"],"names":["Btn","props","useState","isActive","setIsActive","onClick","e","prev","aria-pressed","CustomToolbar","id","className","aria-label","value","Editor","modules","toolbar","container","formats","ReactQuillPage","controlledValue","setControlledValue","style","width","onChange","INLINE_STYLES","label","StyleButton","onToggle","active","ariaLabel","onMouseDown","preventDefault","InlineStyleControls","editorState","currentStyle","getCurrentInlineStyle","map","type","key","has","RichTextEditor","EditorState","createEmpty","setEditorState","editor","useRef","handleKeyCommand","useCallback","command","newState","RichUtils","mapKeyToEditorCommand","keyCode","newEditorState","onTab","getDefaultKeyBinding","inlineStyle","toggleInlineStyle","current","focus","ref","keyBindingFn","DraftJsPage","TinyMCEPage","editorValue","setEditorValue","apiKey","initialValue","init","height","menubar","plugins","onEditorChange","TablePage","scope","Home","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e297b97.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nconst Btn = (props) => {\n  const [isActive, setIsActive] = useState(false);\n  const handleClick = (e) => {\n    setIsActive((prev) => !prev);\n  };\n  return <button {...props} onClick={handleClick} aria-pressed={isActive} />;\n};\nconst CustomToolbar = () => {\n  return (\n    <div id=\"toolbar\">\n      <span className=\"ql-formats\">\n        <Btn className=\"ql-bold\" aria-label=\"Bold\" />\n        <Btn className=\"ql-italic\" aria-label=\"Italics\" />\n        <Btn className=\"ql-underline\" aria-label=\"Underline\" />\n        <Btn className=\"ql-strike\" aria-label=\"Strikethrough\" />\n      </span>\n      <span className=\"ql-formats\">\n        <Btn\n          className=\"ql-list\"\n          value=\"ordered\"\n          aria-label=\"Ordered/Numbered List\"\n        />\n        <Btn className=\"ql-list\" value=\"bullet\" aria-label=\"Bullet Point\" />\n      </span>\n    </div>\n  );\n};\nconst Editor = (props) => {\n  return (\n    <div className=\"text-editor\">\n      <CustomToolbar />\n      <ReactQuill {...props} modules={Editor.modules}></ReactQuill>\n    </div>\n  );\n};\nconst ReactQuillPage = () => {\n  const [controlledValue, setControlledValue] = useState('');\n  return (\n    <div\n      style={{\n        width: '50%',\n      }}\n    >\n      <Editor value={controlledValue} onChange={setControlledValue} />\n    </div>\n  );\n};\n\n/*\n * Quill modules to attach to editor\n * See http://quilljs.com/docs/modules/ for complete options\n */\nEditor.modules = {\n  toolbar: {\n    container: '#toolbar',\n    // handlers: {\n    //   insertStar: insertStar,\n    // },\n  },\n};\n\n/*\n * Quill editor formats\n * See http://quilljs.com/docs/formats/\n */\nEditor.formats = [\n  'header',\n  'font',\n  'size',\n  'bold',\n  'italic',\n  'underline',\n  'strike',\n  'blockquote',\n  'list',\n  'bullet',\n  'indent',\n  'link',\n  'image',\n  'color',\n];\n\nexport default ReactQuillPage;\n","import React, { useState, useRef, useCallback } from 'react';\nimport { Editor, EditorState, RichUtils, getDefaultKeyBinding } from 'draft-js';\n\n// Hmm, not sure about this. This feel more like a plugin to build an editor on top of\n// rather than being a rich text editor itself.\nconst INLINE_STYLES = [\n  { label: 'Bold', style: 'BOLD' },\n  { label: 'Italic', style: 'ITALIC' },\n  { label: 'Underline', style: 'UNDERLINE' },\n  { label: 'Strikethrough', style: 'STRIKETHROUGH' },\n];\n\n/**\n * Toolbar button that controls the rich text capabilities\n */\nconst StyleButton = ({ onToggle, active, ariaLabel, label, style }) => {\n  let className = 'RichEditor-styleButton';\n  if (active) {\n    className += ' RichEditor-activeButton';\n  }\n\n  return (\n    <span\n      className={className}\n      onMouseDown={(e) => {\n        e.preventDefault();\n        onToggle(style);\n      }}\n      aria-label={ariaLabel}\n    >\n      {label}\n    </span>\n  );\n};\n\nfunction InlineStyleControls({ editorState, onToggle }) {\n  const currentStyle = editorState.getCurrentInlineStyle();\n  return (\n    <div className=\"RichEditor-controls\">\n      {INLINE_STYLES.map((type) => (\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={onToggle}\n          style={type.style}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst RichTextEditor = () => {\n  const [editorState, setEditorState] = useState(EditorState.createEmpty());\n  const editor = useRef(null);\n\n  function handleFocus() {\n    if (editor.current) {\n      editor.current.focus();\n    }\n  }\n\n  const handleKeyCommand = useCallback(\n    (command, editorState) => {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n      if (newState) {\n        setEditorState(newState);\n        return 'handled';\n      }\n      return 'not-handled';\n    },\n    [editorState, setEditorState]\n  );\n\n  const mapKeyToEditorCommand = useCallback(\n    (e) => {\n      switch (e.keyCode) {\n        case 9: // TAB\n          const newEditorState = RichUtils.onTab(\n            e,\n            editorState,\n            4 /* maxDepth */\n          );\n          if (newEditorState !== editorState) {\n            setEditorState(newEditorState);\n          }\n          return null;\n        default:\n          return getDefaultKeyBinding(e);\n      }\n    },\n    [editorState, setEditorState]\n  );\n\n  return (\n    <div className=\"RichEditor-root\">\n      <InlineStyleControls\n        editorState={editorState}\n        onToggle={(inlineStyle) => {\n          const newState = RichUtils.toggleInlineStyle(\n            editorState,\n            inlineStyle\n          );\n          setEditorState(newState);\n        }}\n      />\n      <div className=\"RichEditor-editor\" onClick={handleFocus}>\n        <Editor\n          ref={editor}\n          editorState={editorState}\n          handleKeyCommand={handleKeyCommand}\n          keyBindingFn={mapKeyToEditorCommand}\n          onChange={(editorState) => setEditorState(editorState)}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst DraftJsPage = () => (\n  <div>\n    <RichTextEditor />\n  </div>\n);\n\nexport default DraftJsPage;\n","import React, { useState } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n\nconst TinyMCEPage = () => {\n  const [editorValue, setEditorValue] = useState('');\n  return (\n    <div>\n      <Editor\n        apiKey=\"e1pzclij7vg117gyu5li199tmzbmxfqwu7bfa5fq1gl413wx\"\n        initialValue=\"\"\n        init={{\n          height: 500,\n          menubar: false,\n          plugins: [\n            'advlist autolink lists link image charmap print preview anchor',\n            'searchreplace visualblocks code fullscreen',\n            'insertdatetime media table paste code help',\n          ],\n          toolbar:\n            'bold italic underline strikethrough link | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent',\n        }}\n        onEditorChange={setEditorValue}\n      />\n      <pre>{editorValue}</pre>\n    </div>\n  );\n};\n\nexport default TinyMCEPage;\n","import React from 'react';\n\nconst TablePage = () => {\n  return (\n    <div>\n\n    <h1>\n      This is a example page comparing two tables to understand whether they read different to assistive technology users.\n    </h1>\n\n    <h2>\n      Table 1\n    </h2>\n    <table>\n      <caption>Shelly's Daughters</caption>\n        <tbody>\n          <tr>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Age</th>\n            <th scope=\"col\">Birthday</th>\n          </tr>\n          <tr>\n            <th scope=\"row\">Jackie</th>\n            <td>5</td>\n            <td>April 5</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">Beth</th>\n            <td>8</td>\n            <td>January 14</td>\n          </tr>\n      </tbody>\n    </table>\n\n    <h2>\n      Table 2\n    </h2>\n    <table>\n      <caption>Shelly's Daughters</caption>\n        <tbody>\n          <tr>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Age</th>\n            <th scope=\"col\">Birthday</th>\n          </tr>\n          <tr>\n            <td>Jackie</td>\n            <td>5</td>\n            <td>April 5</td>\n          </tr>\n          <tr>\n            <td>Beth</td>\n            <td>8</td>\n            <td>January 14</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default TablePage;","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport ReactQuillPage from './ReactQuill';\nimport DraftJsPage from './DraftJs';\nimport TinyMCEPage from './TinyMCE';\nimport TablePage from './TablePage';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/react-quill\" component={ReactQuillPage} />\n          <Route path=\"/draftjs\" component={DraftJsPage} />\n          <Route path=\"/tinymce\" component={TinyMCEPage} />\n          <Route path=\"/table-test\" component={TablePage} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nconst Home = () => (\n  <div>\n    <h1>Home</h1>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}